{"version":3,"sources":["serviceWorker.ts","sections/Home/Home.tsx","sections/Host/Host.tsx","sections/Listing/Listing.tsx","sections/Listings/Listings.tsx","sections/NotFound/NotFound.tsx","lib/graphql/mutations/LogOut/index.ts","sections/User/User.tsx","lib/graphql/queries/AuthUrl/index.ts","lib/graphql/mutations/Login/index.ts","sections/Login/Login.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Home","Host","Listing","LISTINGS","gql","DELETE_LISTING","Listings","title","useQuery","data","refetch","loading","error","useMutation","deleteLisiting","handleDeleteListings","id","a","variables","listData","listings","map","info","key","onClick","NotFound","LOG_OUT","Content","Layout","User","setViewer","onCompleted","logOut","sessionStorage","removeItem","AUTH_URL","LOG_IN","Login","client","useApolloClient","logIn","token","setItem","loginData","logInRef","useRef","useEffect","code","URL","href","searchParams","get","current","input","hangleAuthorize","query","authUrl","Error","viewerId","to","ApolloClient","uri","request","operation","getItem","setContext","headers","initialViewer","avatar","hasWallet","didRequest","App","useState","login","exact","path","component","render","props","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDChBOC,EAAO,WAChB,OACI,sCCFKC,EAAO,WAChB,OACI,sCCFKC,EAAU,WACnB,OACI,yC,wXCOR,IAAMC,EAAWC,YAAH,KASRC,EAAgBD,YAAF,KAQPE,EAAW,SAAC,GAAmB,EAAlBC,MAAmB,IAAD,EAEHC,YAAuBL,GAArDM,EAFiC,EAEjCA,KAAKC,EAF4B,EAE5BA,QAAQC,EAFoB,EAEpBA,QAAQC,EAFY,EAEZA,MAFY,EAG8CC,YAAsDR,GAHpG,mBAGjCS,EAHiC,YAKlCC,GALkC,EAGjBJ,QAHiB,EAGcC,MAE5B,uCAAG,WAAOI,GAAP,SAAAC,EAAA,sEACpBH,EAAe,CAACI,UAAU,CAACF,QADP,OAExBN,IAFwB,2CAAH,uDAKpBS,EAAWV,EACb,4BAEIA,EAAKW,SAASC,KAAI,SAAAC,GACf,OAAO,wBAAIC,IAAMD,EAAKN,IAAKM,EAAKf,MAAM,4BAAQiB,QAAS,WAAMT,EAAqBO,EAAKN,MAAjD,eAG7C,KAEJ,OAAGL,EACQ,yCAERC,EACQ,4CAIP,6BACI,4BAAKO,KCtDJM,EAAW,WACpB,OACI,0C,+OCFD,IAAMC,EAAUtB,YAAH,KCSZuB,EAAaC,IAAbD,QACKE,EAAO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,UAAqB,EACtBjB,YAAwBa,EAAQ,CAC7CK,YAAa,SAACtB,GACPA,GAAQA,EAAKuB,QACZF,EAAUrB,EAAKuB,WAHpBA,EADgC,oBAavC,OACI,oCAEI,kBAACL,EAAD,KACQ,4BAAQH,QARH,WACjBQ,IACAC,eAAeC,WAAW,WAMd,a,mHC3Bb,IAAMC,EAAW/B,YAAH,K,qQCAd,IAAMgC,EAAShC,YAAH,KCaXuB,EAAaC,IAAbD,QAEKU,EAAQ,SAAC,GAAuB,IAAtBP,EAAqB,EAArBA,UACbQ,EAASC,cADyB,EAIpC1B,YAAsCuB,EAAO,CAC7CL,YAAa,SAACtB,GACPA,GAAQA,EAAK+B,OAAS/B,EAAK+B,MAAMC,QAChCX,EAAUrB,EAAK+B,OACfP,eAAeS,QAAQ,QAAQjC,EAAK+B,MAAMC,WARd,mBAEjCD,EAFiC,YAG3BG,EAH2B,EAGlClC,KAUAmC,GAbkC,EAGhBjC,QAHgB,EAGMC,MAU7BiC,iBAAOL,IACxBM,qBAAU,WACN,IAAMC,EAAO,IAAIC,IAAIpD,OAAOC,SAASoD,MAAMC,aAAaC,IAAI,QACzDJ,GACCH,EAASQ,QAAQ,CACblC,UAAW,CACPmC,MAAO,CAAEN,aAIvB,IAEF,IAAMO,EAAe,uCAAG,8BAAArC,EAAA,+EAEOqB,EAAOiB,MAAmB,CAC7CA,MAAOpB,IAHK,gBAER1B,EAFQ,EAERA,KAGRb,OAAOC,SAASoD,KAAOxC,EAAK+C,QALZ,sDAQV,IAAIC,MAAJ,0DARU,yDAAH,qDAYrB,GAAKd,GAAaA,EAAUH,MAAQ,CAAC,IACrBkB,EAAYf,EAAUH,MAA3BxB,GACP,OAAO,kBAAC,IAAD,CAAU2C,GAAE,gBAAWD,KAGlC,OACI,kBAAC,EAAD,KACQ,4BAAQlC,QAAY8B,GAApB,wBC/CVhB,EAAS,IAAIsB,IAAa,CAC9BC,IAAK,OACLC,QAAO,uCAAG,WAAMC,GAAN,eAAA9C,EAAA,sDACFwB,EAAQR,eAAe+B,QAAQ,gBACrCD,EAAUE,WAAW,CACnBC,QAAS,CACP,eAAiBzB,GAAS,MAJtB,2CAAH,wDASH0B,EAAwB,CAC5BnD,GAAK,KACLyB,MAAQ,KACR2B,OAAS,KACTC,UAAY,KACZC,YAAa,GAKTC,EAAM,WAAO,IAAD,EAEcC,mBAAiBL,GAF/B,mBAEArC,GAFA,aAGuBjB,YAAwCuB,EAAO,CACpFL,YAAc,SAACtB,GACVA,GAAOA,EAAK+B,QACbV,EAAUrB,EAAK+B,OAEZ/B,EAAK+B,MAAMC,MACZR,eAAeS,QAAQ,QAAQjC,EAAK+B,MAAMC,OAE1CR,eAAeC,WAAW,aAXlB,mBAGRuC,EAHQ,KAiBV7B,GAjBU,KAGAhC,MAcCiC,iBAAO4B,IAMxB,OAJA3B,qBAAU,WACRF,EAASQ,YACT,IAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAO,IAAIC,UAAc5E,IACtC,kBAAC,IAAD,CACI0E,OAAK,EACLC,KAAO,YACPE,OAAW,SAAAC,GAAK,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAiBhD,UAAWA,QAEpD,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAO,QAAQC,UAAc3E,IAC1C,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAO,eAAeC,UAAc1E,IACjD,kBAAC,IAAD,CAAOwE,OAAK,EAACC,KAAO,uBAAuBC,UAActE,IACzD,kBAAC,IAAD,CACEoE,OAAK,EACLC,KAAO,SACPE,OAAW,SAAAC,GAAK,OAAI,kBAAC,EAAD,iBAAWA,EAAX,CAAkBhD,UAAWA,QAEnD,kBAAC,IAAD,CAAO8C,UAAYnD,OAQ3BsD,IAASF,OACP,kBAAC,IAAD,CAAgBvC,OAAWA,GAC1B,kBAAC,EAAD,OAED0C,SAASC,eAAe,SXmDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5E,GACL6E,QAAQ7E,MAAMA,EAAM8E,a","file":"static/js/main.ad3ca202.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport const Home = () => {\n    return(\n        <div>Home</div>\n    )\n}","import React from 'react';\n\nexport const Host = () => {\n    return(\n        <div>Host</div>\n    )\n}","import React from 'react';\n\nexport const Listing = () => {\n    return(\n        <div>Listing</div>\n    )\n}","import React from 'react';\nimport { useQuery, useMutation } from \"react-apollo\"\nimport { gql } from \"apollo-boost\";\n//import { ListingsData, DeleteListingData, DeleteListingsVaribales } from './types'\nimport {Listings as ListingsData } from \"./__generated__/Listings\";\nimport { DeleteListing as DeleteListingData ,DeleteListingVariables } from \"./__generated__/DeleteListing\"\n\ninterface Props{\n    title: string\n}\n\nconst LISTINGS = gql`\n    query Listings{\n            listings {\n                id ,\n                title\n            }\n        }\n    `;  \n\nconst DELETE_LISTING =gql`\n    mutation DeleteListing($id: ID!){\n        deleteListing(id: $id){\n            id\n        }\n    }\n`;\n\nexport const Listings = ({title}: Props) => {\n\n    const {data,refetch,loading,error }= useQuery<ListingsData>(LISTINGS);\n    const [deleteLisiting,{loading: deleteLisitngLoading ,error: deleteListingErrors} ] = useMutation<DeleteListingData,DeleteListingVariables>(DELETE_LISTING);\n    //console.log(data)\n    const handleDeleteListings = async (id:string) => {\n       await deleteLisiting({variables:{id} });\n         refetch();\n    }\n\n    const listData = data ? (\n        <ul>\n            { \n            data.listings.map(info => {\n               return <li key= {info.id}>{info.title}<button onClick={()=>{ handleDeleteListings(info.id)}}>Delete</button></li>\n            })}\n        </ul>\n    ) : null ;\n\n    if(loading){\n        return <h1>Loading..</h1>\n    }\n    if(error){\n        return <h1>Some Error..</h1>\n    }\n    \n    return(\n        <div>\n            <h2>{listData}</h2>\n        </div>\n    )\n}\n","import React from 'react';\n\nexport const NotFound = () => {\n    return(\n        <div>NotFound</div>\n    )\n}","import { gql } from \"apollo-boost\";\n\nexport const LOG_OUT = gql`\n    mutation LogOut{\n        logOut{\n            id\n            token\n            avatar\n            hasWallet\n            didRequest\n        }\n    }\n`","import React from 'react';\nimport { Layout } from \"antd\"\nimport { useMutation } from \"@apollo/react-hooks\"\nimport { LOG_OUT } from \"../../lib/graphql/mutations/LogOut\";\nimport { LogOut as LogOutData  } from \"../../lib/graphql/mutations/LogOut/__generated__/LogOut\"\nimport { Viewer } from \"../../lib/types\";\n\ninterface Props{\n    setViewer :(viewer:Viewer) => void\n}\n\nconst { Content } =  Layout;\nexport const User = ({setViewer}:Props) => {\n    const [logOut] = useMutation<LogOutData>(LOG_OUT,{\n        onCompleted: (data) => {\n            if(data && data.logOut){\n                setViewer(data.logOut)\n            }\n        }\n    });\n\n    const handleLogOut = () => {\n        logOut();\n        sessionStorage.removeItem(\"token\");\n    }\n    return(\n        <div>\n            User\n            <Content>\n                    <button onClick = { handleLogOut }>LogOut</button>\n            </Content>\n        </div>\n    )\n}","import { gql } from \"apollo-boost\";\n\nexport const AUTH_URL = gql`\n    query AUTHURL{\n        authUrl\n    }\n`","import { gql } from \"apollo-boost\";\n\nexport const LOG_IN = gql`\n    mutation LogIn($input:LogInInput){\n        logIn(input:$input){\n            id\n            token\n            avatar\n            hasWallet\n            didRequest\n        }\n    }\n`","import React,{ useEffect, useRef } from 'react';\nimport { Layout } from \"antd\"\nimport { AUTH_URL } from \"../../lib/graphql/queries/AuthUrl\";\nimport { LOG_IN } from \"../../lib/graphql/mutations/Login\";\nimport { LogIn as LogInData, LogInVariables } from \"../../lib/graphql/mutations/Login/__generated__/LogIn\"\nimport { AUTHURL as  AUTHUrlData } from \"../../lib/graphql/queries/AuthUrl/__generated__/AUTHURL\"\nimport { Viewer } from \"../../lib/types\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\"\nimport { Redirect } from \"react-router\";\n\n\ninterface Props{\n    setViewer :(viewer:Viewer) => void\n}\n\nconst { Content } =  Layout;\n\nexport const Login = ({setViewer}:Props) => {\n    const client = useApolloClient();\n    const [logIn, \n        { data : loginData, loading:logInLoading, error:loginError }\n    ] = useMutation<LogInData,LogInVariables>(LOG_IN,{\n        onCompleted: (data) => {\n            if(data && data.logIn && data.logIn.token){\n                setViewer(data.logIn)\n                sessionStorage.setItem(\"token\",data.logIn.token);\n            }\n        }\n    });\n\n    const logInRef = useRef(logIn);\n    useEffect(()=>{\n        const code = new URL(window.location.href).searchParams.get(\"code\");\n        if(code){\n            logInRef.current({\n                variables: {\n                    input: { code }\n                }\n            })\n        }\n    },[])\n\n    const hangleAuthorize = async () => {\n        try{\n            const { data } = await client.query<AUTHUrlData>({\n                query: AUTH_URL\n            });\n            window.location.href = data.authUrl;\n        }\n        catch{\n            throw new Error(`Sorry! we were unable to login. Please try again later`)\n        }\n    }\n\n    if  (loginData && loginData.logIn)  {\n        const {id : viewerId} = loginData.logIn;\n        return <Redirect to={`/user/${viewerId}`}/>\n    }   \n\n    return(\n        <Content>\n                <button onClick = { hangleAuthorize }>\n                    Signin with google\n                </button>\n        </Content>\n    )\n}","import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-boost\"\nimport { ApolloProvider,useMutation } from \"react-apollo\"\nimport \"./styles/index.css\";\nimport {BrowserRouter as Router, Route,Switch} from \"react-router-dom\";\nimport { Home,Host,Listing,Listings,User,NotFound,Login} from \"./sections\"\nimport { Viewer } from \"../src/lib/types\"\nimport { LOG_IN } from \"../src/lib/graphql/mutations/Login/index\";\nimport { LogIn as LogInData, LogInVariables } from \"../src/lib/graphql/mutations/Login/__generated__/LogIn\"\n\n\nconst client = new ApolloClient({\n  uri: '/api',\n  request : async operation =>{\n    const token = sessionStorage.getItem(\"X-CSRF-TOKEN\");\n    operation.setContext({\n      headers: {\n        \"X-CSRF-TOKEN\" : token || \"\"\n      }\n    })\n  }\n})\nconst initialViewer: Viewer = {\n  id : null,\n  token : null,\n  avatar : null,\n  hasWallet : null,\n  didRequest : false\n}\ninterface Props{\n  setViewer:(viewrer : Viewer)=> void\n}\nconst App = () => {\n\n  const [ viewer, setViewer ] = useState<Viewer>(initialViewer);\n  const [ login,{ error:logInError } ] = useMutation<LogInData , LogInVariables>(LOG_IN,{\n    onCompleted : (data) =>{\n      if(data &&data.logIn){\n        setViewer(data.logIn);\n\n        if(data.logIn.token){\n          sessionStorage.setItem(\"token\",data.logIn.token);\n        }else{\n          sessionStorage.removeItem(\"token\")\n        }\n      }\n    }\n  });\n\n  const logInRef = useRef(login);\n\n  useEffect(() => {\n    logInRef.current();\n  },[])\n\n  return(\n\n    <Router>\n      <Switch>\n        <Route exact path = \"/\" component = { Home } />\n        <Route \n            exact \n            path = \"/user/:id\"  \n            render = { props => <User {...props} setViewer={setViewer}  />}\n        />\n        <Route exact path = \"/host\" component = { Host } />\n        <Route exact path = \"/listing/:id\" component = { Listing } />\n        <Route exact path = \"/listings/:location?\" component = { Listings } />\n        <Route \n          exact \n          path = \"/login\" \n          render = { props => <Login {...props} setViewer={setViewer} /> } \n        />\n        <Route component ={NotFound} />\n      </Switch>\n    </Router>\n\n  )\n}\n\n\nReactDOM.render(\n  <ApolloProvider client = { client }>\n   <App/>\n  </ApolloProvider>,\n  document.getElementById('root')\n \n \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}